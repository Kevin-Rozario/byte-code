// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                           String          @id @default(uuid())
  userName                     String          @unique
  email                        String          @unique
  password                     String
  fullName                     String
  isEmailVerified              Boolean         @default(false)
  role                         Role            @default(USER)
  refreshToken                 String?
  emailVerificationToken       String?
  emailVerificationTokenExpiry DateTime?
  forgotPasswordToken          String?
  forgotPasswordTokenExpiry    DateTime?
  createdAt                    DateTime        @default(now())
  updateAt                     DateTime        @updatedAt
  Problem                      Problem[]
  submission                   Submission[]
  problemsSolved               ProblemSolved[]
  playlists                    Playlist[]
}

model Problem {
  id                 String     @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tags               String[]
  userId             String
  examples           Json
  constraints        Json
  hints              Json?
  editorial          Json?
  testCases          Json
  codeSnippets       Json
  referenceSolutions Json
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relationships
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions      Submission[]
  solvedBy         ProblemSolved[]
  problemsPlaylist ProblemInPlaylist[]
}

enum Status {
  ACCEPTED
  WORNG_ANSWER
}

model Submission {
  id            String           @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String // Accepted , wrong answer
  memory        String?
  time          String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem       Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCases     TestCaseResult[]
}

model TestCaseResult {
  id            String     @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String  @id @default(uuid())
  name        String
  description String?
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems ProblemInPlaylist[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId]) // unique playlist names per user
}

model ProblemInPlaylist {
  id         String   @id @default(uuid())
  playListId String
  problemId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  playlist Playlist @relation(fields: [playListId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playListId, problemId])
}
